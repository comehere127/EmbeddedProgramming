
TruyenDuLieu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002c  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019d  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000123  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000219  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011a  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000073  00000000  00000000  00000eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_char_tx>:
#include <avr/io.h>
#include <avr/delay.h>

//chuong trinh con phat du lieu
void uart_char_tx(unsigned char chr){
    while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1    
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <uart_char_tx>
            UDR=chr;
  70:	8c b9       	out	0x0c, r24	; 12
}
  72:	08 95       	ret

00000074 <main>:

int main(void){    
  74:	1f 93       	push	r17
//set baud, 57.6k ung voi f=8Mhz, xem bang 70 trang 165, Atmega32 datasheet
    UBRRH=0;    
  76:	10 bc       	out	0x20, r1	; 32
    UBRRL=8;
  78:	88 e0       	ldi	r24, 0x08	; 8
  7a:	89 b9       	out	0x09, r24	; 9
    
    //set khung truyen va kich hoat bo nhan du lieu
    UCSRA=0x00;
  7c:	1b b8       	out	0x0b, r1	; 11
    UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  7e:	96 e8       	ldi	r25, 0x86	; 134
  80:	90 bd       	out	0x20, r25	; 32
    UCSRB=(1<<TXEN);    
  82:	8a b9       	out	0x0a, r24	; 10
    
    while(1){
        for (char i=32; i<128; i++){
  84:	10 e2       	ldi	r17, 0x20	; 32
  86:	0a c0       	rjmp	.+20     	; 0x9c <main+0x28>
            uart_char_tx(i+1);    //phat du lieu
  88:	1f 5f       	subi	r17, 0xFF	; 255
  8a:	81 2f       	mov	r24, r17
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <uart_char_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	87 ea       	ldi	r24, 0xA7	; 167
  92:	91 e6       	ldi	r25, 0x61	; 97
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x20>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x26>
  9a:	00 00       	nop
    UCSRA=0x00;
    UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    UCSRB=(1<<TXEN);    
    
    while(1){
        for (char i=32; i<128; i++){
  9c:	11 23       	and	r17, r17
  9e:	a4 f7       	brge	.-24     	; 0x88 <main+0x14>
  a0:	10 e2       	ldi	r17, 0x20	; 32
  a2:	fc cf       	rjmp	.-8      	; 0x9c <main+0x28>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
